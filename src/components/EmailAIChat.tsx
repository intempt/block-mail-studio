
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { 
  Send, 
  Sparkles, 
  MessageSquare, 
  Copy,
  ThumbsUp,
  ThumbsDown,
  RotateCcw,
  Wand2,
  Loader2,
  Plus,
  Eye,
  Download,
  Upload,
  Image as ImageIcon,
  FileText,
  Video,
  Link,
  Palette,
  Target,
  TrendingUp,
  Users,
  Mail,
  Calendar,
  Settings
} from 'lucide-react';
import { DirectAIService } from '@/services/directAIService';
import { TemplateEvolution } from './TemplateEvolution';
import { TemplateAIGenerator } from './TemplateAIGenerator';
import { ImageUploader } from './ImageUploader';
import { extractServiceData } from '@/utils/serviceResultHelper';

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant' | 'error';
  content: string;
  timestamp: Date;
  metadata?: any;
}

interface EmailAIChatProps {
  onEmailGenerated?: (html: string, subject?: string, previewText?: string) => void;
  onInsertContent?: (content: string) => void;
  initialPrompt?: string;
  context?: any;
}

export const EmailAIChat: React.FC<EmailAIChatProps> = ({ 
  onEmailGenerated, 
  onInsertContent,
  initialPrompt,
  context 
}) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [currentPrompt, setCurrentPrompt] = useState(initialPrompt || '');
  const [isGenerating, setIsGenerating] = useState(false);
  const [streamingContent, setStreamingContent] = useState('');
  const [activeTab, setActiveTab] = useState('chat');
  const chatContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  const generateEmailFromPrompt = async (prompt: string) => {
    if (!prompt.trim()) return;

    setIsGenerating(true);
    setStreamingContent('');
    
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: prompt,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, newMessage]);
    setCurrentPrompt('');
    
    try {
      const result = await DirectAIService.generateEmail(prompt, 'general');
      const generatedData = extractServiceData(result, { html: '', subject: '', previewText: '' });
      
      if (generatedData.html) {
        const assistantMessage: ChatMessage = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: generatedData.html,
          timestamp: new Date(),
          metadata: {
            subject: generatedData.subject || 'Generated Email',
            previewText: generatedData.previewText || 'Email content generated by AI'
          }
        };
        
        setMessages(prev => [...prev, assistantMessage]);
        onEmailGenerated?.(generatedData.html, generatedData.subject || 'Generated Email', generatedData.previewText || '');
      }
    } catch (error) {
      console.error('Failed to generate email:', error);
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'error',
        content: 'Failed to generate email. Please try again.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateImageContent = async (prompt: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.generateImage(prompt);
      const imageData = extractServiceData(result, { imageUrl: '' });
      
      if (imageData.imageUrl) {
        const newMessage: ChatMessage = {
          id: Date.now().toString(),
          type: 'assistant',
          content: `<img src="${imageData.imageUrl}" alt="Generated Image" style="max-width: 100%; height: auto;" />`,
          timestamp: new Date(),
          metadata: { imageUrl: imageData.imageUrl }
        };
        setMessages(prev => [...prev, newMessage]);
      }
    } catch (error) {
      console.error('Failed to generate image:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const improveContent = async (content: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.improveContent(content);
      const improvedContent = extractServiceData(result, content);
      
      const newMessage: ChatMessage = {
        id: Date.now().toString(),
        type: 'assistant',
        content: improvedContent,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, newMessage]);
    } catch (error) {
      console.error('Failed to improve content:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateSubjectLines = async (content: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.generateSubjectVariants(content, 5);
      const subjects = extractServiceData(result, []);
      
      if (subjects.length > 0) {
        const subjectsList = subjects.map((subject, index) => 
          `${index + 1}. ${subject}`
        ).join('\n');
        
        const newMessage: ChatMessage = {
          id: Date.now().toString(),
          type: 'assistant',
          content: `Here are 5 subject line suggestions:\n\n${subjectsList}`,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, newMessage]);
      }
    } catch (error) {
      console.error('Failed to generate subject lines:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const analyzePerformance = async (content: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.analyzePerformance(content);
      const analysis = extractServiceData(result, { overallScore: 0, optimizationSuggestions: [] });
      
      const analysisText = `Performance Analysis:\nOverall Score: ${analysis.overallScore}/100\n\nSuggestions:\n${analysis.optimizationSuggestions?.join('\n') || 'No suggestions available'}`;
      
      const newMessage: ChatMessage = {
        id: Date.now().toString(),
        type: 'assistant',
        content: analysisText,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, newMessage]);
    } catch (error) {
      console.error('Failed to analyze performance:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSendPrompt = () => {
    generateEmailFromPrompt(currentPrompt);
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleSendPrompt();
    }
  };

  const handleCopyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const handleInsertContentClick = (content: string) => {
    onInsertContent?.(content);
  };

  const renderMessageContent = (message: ChatMessage) => {
    if (message.type === 'error') {
      return <div className="text-red-500">{message.content}</div>;
    }

    if (message.metadata?.imageUrl) {
      return <img src={message.metadata.imageUrl} alt="Generated" className="max-w-full h-auto rounded-md" />;
    }

    return <div dangerouslySetInnerHTML={{ __html: message.content }} />;
  };

  return (
    <Card className="h-full flex flex-col">
      <div className="p-3 border-b border-gray-200">
        <div className="flex items-center gap-2 mb-3">
          <Sparkles className="w-4 h-4 text-yellow-500" />
          <h3 className="text-base font-semibold">AI Email Generator</h3>
          <Badge variant="secondary" className="ml-auto bg-yellow-50 text-yellow-700 text-xs">
            Interactive
          </Badge>
        </div>
        <p className="text-sm text-gray-600">
          Describe the email you want to generate and let AI create it for you.
        </p>
      </div>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="chat">Chat</TabsTrigger>
          <TabsTrigger value="templates">Templates</TabsTrigger>
          <TabsTrigger value="evolution">Evolution</TabsTrigger>
          <TabsTrigger value="images">Images</TabsTrigger>
        </TabsList>
        
        <div className="flex-1 flex flex-col overflow-hidden">
          <TabsContent value="chat" className="flex-1 flex flex-col m-0">
            <ScrollArea ref={chatContainerRef} className="flex-1 p-4 space-y-4">
              {messages.map((message) => (
                <div key={message.id} className={`flex flex-col ${message.type === 'user' ? 'items-end' : 'items-start'}`}>
                  <div className="flex flex-col gap-1 max-w-[80%]">
                    <div className={`text-sm rounded-md p-3 ${message.type === 'user' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`}>
                      {renderMessageContent(message)}
                    </div>
                    <div className="text-xs text-gray-500 self-end">
                      {message.metadata?.subject && <div className="font-semibold">{message.metadata.subject}</div>}
                      {message.timestamp.toLocaleTimeString()}
                    </div>
                    {message.type === 'assistant' && (
                      <div className="flex justify-end gap-2">
                        <Button variant="outline" size="sm" onClick={() => handleCopyToClipboard(message.content)}>
                          <Copy className="w-3 h-3 mr-2" />
                          Copy
                        </Button>
                        <Button variant="secondary" size="sm" onClick={() => handleInsertContentClick(message.content)}>
                          <Plus className="w-3 h-3 mr-2" />
                          Insert
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
              {isGenerating && (
                <div className="flex items-start">
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Generating email...
                </div>
              )}
            </ScrollArea>

            <div className="p-4 border-t border-gray-200">
              <div className="relative">
                <Input
                  type="text"
                  placeholder="Describe the email you want to generate..."
                  value={currentPrompt}
                  onChange={(e) => setCurrentPrompt(e.target.value)}
                  onKeyDown={handleKeyDown}
                  disabled={isGenerating}
                  className="pr-10"
                />
                <Button
                  onClick={handleSendPrompt}
                  disabled={isGenerating}
                  className="absolute right-1 top-1 rounded-full p-1.5"
                >
                  {isGenerating ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Send className="w-4 h-4" />
                  )}
                  <span className="sr-only">Generate</span>
                </Button>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="templates" className="flex-1 m-0">
            <TemplateAIGenerator onTemplateGenerated={(template) => {
              onEmailGenerated?.(template.html, template.subject, template.previewText);
            }} />
          </TabsContent>

          <TabsContent value="evolution" className="flex-1 m-0">
            <TemplateEvolution editor={null} templateId="" />
          </TabsContent>

          <TabsContent value="images" className="flex-1 p-4">
            <ImageUploader onImagesChange={(images) => console.log('Images:', images)} />
          </TabsContent>
        </div>
      </Tabs>
    </Card>
  );
};
