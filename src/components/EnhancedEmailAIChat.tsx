
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Progress } from '@/components/ui/progress';
import { 
  Send, 
  Sparkles, 
  MessageSquare, 
  Copy,
  ThumbsUp,
  ThumbsDown,
  RotateCcw,
  Wand2,
  Loader2,
  Plus,
  Eye,
  Download,
  Upload,
  Image as ImageIcon,
  FileText,
  Video,
  Link,
  Palette,
  Target,
  TrendingUp,
  Users,
  Mail,
  Calendar,
  Settings,
  Brain,
  BarChart3,
  Zap
} from 'lucide-react';
import { DirectAIService } from '@/services/directAIService';
import { TemplateEvolution } from './TemplateEvolution';
import { TemplateAIGenerator } from './TemplateAIGenerator';
import { ImageUploader } from './ImageUploader';
import { extractServiceData } from '@/utils/serviceResultHelper';

interface ChatMessage {
  id: string;
  type: 'user' | 'assistant' | 'error';
  content: string;
  timestamp: Date;
  metadata?: Record<string, any>;
}

interface EnhancedEmailAIChatProps {
  onEmailGenerated?: (html: string, subject?: string, previewText?: string) => void;
  onInsertContent?: (content: string) => void;
  initialPrompt?: string;
  context?: string;
  showAdvancedFeatures?: boolean;
}

export const EnhancedEmailAIChat: React.FC<EnhancedEmailAIChatProps> = ({ 
  onEmailGenerated, 
  onInsertContent,
  initialPrompt,
  context,
  showAdvancedFeatures = true
}) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [currentPrompt, setCurrentPrompt] = useState(initialPrompt || '');
  const [isGenerating, setIsGenerating] = useState(false);
  const [streamingContent, setStreamingContent] = useState('');
  const [uploadedImages, setUploadedImages] = useState<string[]>([]);
  const [activeTab, setActiveTab] = useState('chat');
  const chatContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  const handlePromptChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCurrentPrompt(e.target.value);
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files) {
      const newImages = Array.from(files).map(file => URL.createObjectURL(file));
      setUploadedImages(prevImages => [...prevImages, ...newImages]);
    }
  };

  const insertImage = (imageUrl: string) => {
    const imageTag = `<img src="${imageUrl}" alt="Uploaded" style="max-width: 100%; height: auto;" />`;
    onInsertContent?.(imageTag);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const retryMessage = async (message: ChatMessage) => {
    if (message.type === 'user') {
      generateEmailFromPrompt(message.content);
    }
  };

  const generateEmailFromPrompt = async (prompt: string) => {
    if (!prompt.trim()) return;

    setIsGenerating(true);
    setStreamingContent('');
    
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: prompt,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, newMessage]);
    setCurrentPrompt('');
    
    try {
      const result = await DirectAIService.generateEmail(prompt, 'general');
      const generatedData = extractServiceData(result, { html: '', subject: '', previewText: '' });
      
      if (generatedData.html) {
        const assistantMessage: ChatMessage = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: generatedData.html,
          timestamp: new Date(),
          metadata: {
            subject: generatedData.subject || 'Generated Email',
            previewText: generatedData.previewText || 'Email content generated by AI'
          }
        };
        
        setMessages(prev => [...prev, assistantMessage]);
        onEmailGenerated?.(generatedData.html, generatedData.subject || 'Generated Email', generatedData.previewText || '');
      }
    } catch (error) {
      console.error('Failed to generate email:', error);
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'error',
        content: 'Failed to generate email. Please try again.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateImageContent = async (prompt: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.generateImage(prompt);
      const imageData = extractServiceData(result, { imageUrl: '' });
      
      if (imageData.imageUrl) {
        const newMessage: ChatMessage = {
          id: Date.now().toString(),
          type: 'assistant',
          content: `<img src="${imageData.imageUrl}" alt="Generated Image" style="max-width: 100%; height: auto;" />`,
          timestamp: new Date(),
          metadata: { imageUrl: imageData.imageUrl }
        };
        setMessages(prev => [...prev, newMessage]);
      }
    } catch (error) {
      console.error('Failed to generate image:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const improveContent = async (content: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.improveContent(content);
      const improvedContent = extractServiceData(result, content);
      
      const newMessage: ChatMessage = {
        id: Date.now().toString(),
        type: 'assistant',
        content: improvedContent,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, newMessage]);
    } catch (error) {
      console.error('Failed to improve content:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateSubjectLines = async (content: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.generateSubjectVariants(content, 5);
      const subjects = extractServiceData(result, []);
      
      if (subjects.length > 0) {
        const subjectsList = subjects.map((subject, index) => 
          `${index + 1}. ${subject}`
        ).join('\n');
        
        const newMessage: ChatMessage = {
          id: Date.now().toString(),
          type: 'assistant',
          content: `Here are 5 subject line suggestions:\n\n${subjectsList}`,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, newMessage]);
      }
    } catch (error) {
      console.error('Failed to generate subject lines:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const analyzePerformance = async (content: string) => {
    setIsGenerating(true);
    try {
      const result = await DirectAIService.analyzePerformance(content);
      const analysis = extractServiceData(result, { 
        overallScore: 0, 
        optimizationSuggestions: [],
        deliverabilityScore: 0,
        mobileScore: 0,
        spamScore: 0,
        metrics: {
          loadTime: { value: 0, status: 'unknown' },
          accessibility: { value: 0, status: 'unknown' },
          imageOptimization: { value: 0, status: 'unknown' },
          linkCount: { value: 0, status: 'unknown' }
        },
        accessibilityIssues: []
      });
      
      const analysisText = `Performance Analysis:\nOverall Score: ${analysis.overallScore}/100\n\nSuggestions:\n${analysis.optimizationSuggestions?.join('\n') || 'No suggestions available'}`;
      
      const newMessage: ChatMessage = {
        id: Date.now().toString(),
        type: 'assistant',
        content: analysisText,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, newMessage]);
    } catch (error) {
      console.error('Failed to analyze performance:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Card className="h-full flex flex-col">
      <div className="p-3 border-b">
        <div className="flex items-center gap-2">
          <Mail className="w-4 h-4 text-blue-600" />
          <h3 className="text-lg font-semibold">AI Email Generator</h3>
          {showAdvancedFeatures && (
            <Badge variant="secondary" className="ml-auto bg-blue-50 text-blue-700 text-xs">
              Enhanced
            </Badge>
          )}
        </div>
      </div>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="chat">Chat</TabsTrigger>
          <TabsTrigger value="templates">Templates</TabsTrigger>
          <TabsTrigger value="evolution">Evolution</TabsTrigger>
          <TabsTrigger value="images">Images</TabsTrigger>
        </TabsList>
        
        <div className="flex-1 flex flex-col overflow-hidden">
          <TabsContent value="chat" className="flex-1 flex flex-col m-0">
            <ScrollArea ref={chatContainerRef} className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <div key={message.id} className={`flex flex-col ${message.type === 'user' ? 'items-end' : 'items-start'}`}>
                    <div className={`rounded-lg p-3 w-fit max-w-md ${message.type === 'user' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`}>
                      {message.type === 'error' ? (
                        <div className="text-red-500">{message.content}</div>
                      ) : (
                        <div dangerouslySetInnerHTML={{ __html: message.content }} />
                      )}
                      {message.type === 'assistant' && message.metadata?.subject && (
                        <div className="mt-2 text-sm">
                          Subject: {message.metadata.subject}
                        </div>
                      )}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {message.type === 'user' ? 'You' : 'AI'} - {message.timestamp.toLocaleTimeString()}
                      {message.type === 'error' && (
                        <Button variant="link" size="sm" onClick={() => retryMessage(message)}>
                          Retry
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
                {isGenerating && (
                  <div className="flex items-start">
                    <Loader2 className="w-4 h-4 animate-spin mr-2" />
                    Generating email...
                  </div>
                )}
              </div>
            </ScrollArea>

            <div className="p-4 border-t">
              <div className="flex items-center space-x-2">
                <Input
                  type="text"
                  placeholder="Enter your prompt..."
                  value={currentPrompt}
                  onChange={handlePromptChange}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      generateEmailFromPrompt(currentPrompt);
                    }
                  }}
                />
                <Button onClick={() => generateEmailFromPrompt(currentPrompt)} disabled={isGenerating}>
                  {isGenerating ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Send className="w-4 h-4" />
                  )}
                </Button>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="templates" className="flex-1 m-0">
            <TemplateAIGenerator 
              editor={null}
              onTemplateGenerated={(template) => {
                onEmailGenerated?.(template.html, template.name, template.description);
              }} 
            />
          </TabsContent>

          <TabsContent value="evolution" className="flex-1 m-0">
            <TemplateEvolution editor={null} templateId="" />
          </TabsContent>

          <TabsContent value="images" className="flex-1 p-4">
            <ImageUploader onImagesChange={(images) => console.log('Images:', images)} />
          </TabsContent>
        </div>
      </Tabs>
    </Card>
  );
};
